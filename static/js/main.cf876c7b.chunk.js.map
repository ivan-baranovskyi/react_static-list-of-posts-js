{"version":3,"sources":["components/CommentInfo/CommentInfo.jsx","components/CommentList/CommentList.jsx","components/UserInfo/UserInfo.jsx","components/PostInfo/PostInfo.jsx","components/PostList/PostList.jsx","App.jsx","index.jsx"],"names":["CommentInfo","comment","name","email","body","className","href","undefined","CommentList","comments","map","id","UserInfo","user","PostInfo","post","title","length","PostList","posts","preparedPosts","postsFromServer","userId","usersFromServer","find","postId","commentsFromServer","filter","App","ReactDOM","render","document","getElementById"],"mappings":"018IAAaA,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,KAErB,OACE,sBAAKC,UAAU,cAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,wBAAQA,UAAU,oBAAlB,SAAuCH,IAEtC,OAED,mBACEG,UAAU,qBACVC,UAAgBC,IAAVJ,EAAA,iBAAgCA,GAAU,KAFlD,cAIaI,IAAVJ,EAAsBA,EAAQ,UAInC,qBAAKE,UAAU,oBAAf,SAAoCD,QCd7BI,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACzB,qBAAKJ,UAAU,cAAf,SACGI,EAASC,KAAI,SAAAT,GAAO,OACnB,cAAC,EAAD,CAA8BA,QAASA,GAArBA,EAAQU,UCLnBC,G,MAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjBV,EAAgBU,EAAhBV,MAAOD,EAASW,EAATX,KAEf,OACE,mBACEG,UAAU,WACVC,UAAgBC,IAAVJ,EAAA,iBAAgCA,GAAU,KAFlD,SAIGD,MCLMY,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjBC,EAAgCD,EAAhCC,MAAOZ,EAAyBW,EAAzBX,KAAMS,EAAmBE,EAAnBF,KAAMJ,EAAaM,EAAbN,SAE3B,OACE,sBAAKJ,UAAU,WAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,oBAAIA,UAAU,kBAAd,SAAiCW,IAEjC,gCACG,cAED,cAAC,EAAD,CAAUH,KAAMA,UAIpB,mBAAGR,UAAU,iBAAb,SAA+BD,IAC9BK,EAASQ,OAAS,EACjB,cAAC,EAAD,CAAaR,SAAUA,IAEvB,qCACE,uBACA,mBAAG,UAAQ,oBAAX,oCCxBGS,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtB,qBAAKd,UAAU,WAAf,SACGc,EAAMT,KAAI,SAAAK,GAAI,OACb,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKJ,UCU1B,IAAMS,EAAgBC,EAAgBX,KAAI,SAAAS,GAAK,kCAC1CA,GAD0C,IAE7CN,MAVmBS,EAUDH,EAAMG,OATjBC,EAAgBC,MAAK,SAAAX,GAAI,OAAIA,EAAKF,KAAOW,MAAW,MAU3Db,UAPuBgB,EAOGN,EAAMR,GANzBe,EAAmBC,QAAO,SAAA1B,GAAO,OAAIA,EAAQwB,SAAWA,QADjE,IAAyBA,EAJJH,KAcRM,EAAM,kBACjB,0BAASvB,UAAU,MAAnB,UACE,oBAAIA,UAAU,aAAd,kCAEA,cAAC,EAAD,CAAUc,MAAOC,QCrBrBS,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cf876c7b.chunk.js","sourcesContent":["export const CommentInfo = ({ comment }) => {\n  const { name, email, body } = comment;\n\n  return (\n    <div className=\"CommentInfo\">\n      <div className=\"CommentInfo__title\">\n        <strong className=\"CommentInfo__name\">{name}</strong>\n\n        {' by '}\n\n        <a\n          className=\"CommentInfo__email\"\n          href={email !== undefined ? `mailto:${email}` : null}\n        >\n          {email !== undefined ? email : null}\n        </a>\n      </div>\n\n      <div className=\"CommentInfo__body\">{body}</div>\n    </div>\n  );\n};\n","import './CommentList.scss';\n\nimport { CommentInfo } from '../CommentInfo';\n\nexport const CommentList = ({ comments }) => (\n  <div className=\"CommentList\">\n    {comments.map(comment => (\n      <CommentInfo key={comment.id} comment={comment} />\n    ))}\n  </div>\n);\n","import './UserInfo.scss';\n\nexport const UserInfo = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a\n      className=\"UserInfo\"\n      href={email !== undefined ? `mailto:${email}` : null}\n    >\n      {name}\n    </a>\n  );\n};\n","import './PostInfo.scss';\n\nimport { CommentList } from '../CommentList';\nimport { UserInfo } from '../UserInfo';\n\nexport const PostInfo = ({ post }) => {\n  const { title, body, user, comments } = post;\n\n  return (\n    <div className=\"PostInfo\">\n      <div className=\"PostInfo__header\">\n        <h3 className=\"PostInfo__title\">{title}</h3>\n\n        <div>\n          {' Posted by '}\n\n          <UserInfo user={user} />\n        </div>\n      </div>\n\n      <p className=\"PostInfo__body\">{body}</p>\n      {comments.length > 0 ? (\n        <CommentList comments={comments} />\n      ) : (\n        <>\n          <hr />\n          <b data-cy=\"NoCommentsMessage\">No comments yet</b>\n        </>\n      )}\n    </div>\n  );\n};\n","import { PostInfo } from '../PostInfo';\n\nexport const PostList = ({ posts }) => (\n  <div className=\"PostList\">\n    {posts.map(post => (\n      <PostInfo key={post.id} post={post} />\n    ))}\n  </div>\n);\n","import './App.scss';\n\nimport postsFromServer from './api/posts.json';\nimport commentsFromServer from './api/comments.json';\nimport usersFromServer from './api/users.json';\nimport { PostList } from './components/PostList';\n\nfunction getUserById(userId) {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n\nfunction getCommentsById(postId) {\n  return commentsFromServer.filter(comment => comment.postId === postId);\n}\n\nconst preparedPosts = postsFromServer.map(posts => ({\n  ...posts,\n  user: getUserById(posts.userId),\n  comments: getCommentsById(posts.id),\n}));\n\nexport const App = () => (\n  <section className=\"App\">\n    <h1 className=\"App__title\">Static list of posts</h1>\n\n    <PostList posts={preparedPosts} />\n  </section>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}